include ./element.pug
include ./stack.pug

include ./icons/solid/lockClosed.pug
include ./icons/solid/mail.pug
include ./icons/solid/search.pug

mixin form
  +stack("form")(size=12)&attributes(attributes)
    block

mixin fieldset
  +stack("fieldset")(size=6)&attributes(attributes)
    if attributes.legend
      legend(class="sr-only")= attributes.legend
    block

mixin fieldsetHeading
  h4(class="text-base font-medium text-ink")
    block

mixin fieldsetSubheading
  p(class="text-sm leading-5 text-ink-lighter")
    block

mixin label
  label.text-sm.font-normal.block(class="label")&attributes(attributes)
    block

mixin field
  +stack(size=2)
    if attributes.label
      +label(for=(attributes.id || attributes.name))= attributes.label
    +stack(size=1)
      block
      if attributes.errorText
        +fieldErrorText= attributes.errorText
      else if attributes.helpText
        +fieldHelpText= attributes.helpText

mixin fieldErrorText
  -
    const classNames = [
      'text-red',
      'text-xs'
    ];

  +element('p')(class=classNames)
    block

mixin fieldHelpText
  p.text-ink-lighter.text-xs
    block

mixin input(tagName = "input")
  -
    const { type = 'text', invalid = false, icon = false, size = 'medium', tags = [] } = attributes;

    const input = {
      default: {
        classNames: [
          'bg-white',
          'border-sky-dark',
          'border',
          'disabled:bg-sky-light',
          'disabled:cursor-not-allowed',
          'flex',
          'focus-within:border-blue',
          'focus-within:hover:border-blue',
          'focus:outline-0',
          'hover:border-ink-lightest',
          'items-center',
          'w-full',
          'transition',
        ]
      },
      icon: {
        true: {
          classNames: [
            'pl-10'
          ]
        },
        false: {
          classNames: []
        }
      },
      sizes: {
        small: {
          classNames: [
            'h-8',
            'px-2',
            'rounded-md',
            'text-sm',
          ]
        },
        medium: {
          classNames:[
            'h-12',
            'px-3',
            'rounded-lg',
          ]
        }
      }
    };

    const classNames = [
      ...input.default.classNames,
      ...input.icon[icon].classNames,
      ...input.sizes[size].classNames
    ].sort();

    const iconClassNames = [
      'text-ink-lightest',
      'h-full',
      'flex',
      'justify-center',
      'items-center',
      'absolute',
      'm-1px',
      'pl-3',
      'py-3'
    ];

  .relative
    if icon
      +element("div")(class=iconClassNames)
        +inputIcon(type)
    +element(tagName)(class=classNames)&attributes(attributes)
      block

mixin inputIcon(type)
  case type
    when "email"
      +mailSolidIcon&attributes(attributes)
    when "password"
      +lockClosedSolidIcon&attributes(attributes)
    when "search"
      +searchSolidIcon&attributes(attributes)

mixin select
  +input("select")&attributes(attributes)
    block

mixin option
  option&attributes(attributes)
    block

mixin selectField
  -
    const { label, errorText, helpText, ...selectAttributes } = attributes;
    const fieldAttributes = { label, errorText, helpText };

  +field&attributes(fieldAttributes)
    +select&attributes(selectAttributes)
      block

mixin inputField
  -
    const { label, errorText, helpText, ...inputAttributes } = attributes;
    const fieldAttributes = { label, errorText, helpText };

  +field&attributes(fieldAttributes)
    +input&attributes(inputAttributes)

mixin emailInputField
  +inputField(type="email" icon)&attributes(attributes)

mixin passwordInputField
  +inputField(type="password" icon)&attributes(attributes)

mixin searchInputField
  +inputField(type="search" icon)&attributes(attributes)

mixin textInputField
  +inputField(type="text")&attributes(attributes)

